@model  Langben.DAL.Blog

@{
    ViewBag.Title = "Register";
    Layout = "~/Views/Shared/Blog.cshtml";
}
<script src="~/Res/ckeditor/ckeditor.js"></script>
<link rel="stylesheet" type="text/css" href="@Url.Content("~/Res/webuploader/css/webuploader.css")" />


<script type="text/javascript" src="@Url.Content("~/Res/webuploader/js/webuploader.nolog.min.js")"></script>




<script>
    //var oEditor = CKEDITOR.instances.Content.getData();
    //if(oEditor==null||oEditor=='')
    //{
    //    alert('内容不能为空');
    //    //return false;
    //}
    //$("#Content").val(oEditor);


</script>
@using (Html.BeginForm("", "api/AccountApi/Register"))
{
    <div class="form-horizontal">
        @Html.AntiForgeryToken()

        @Html.ValidationSummary("", new { @class = "text-danger" })
        <div class="form-group">
            <label class="col-md-2 control-label" for="Title">标题</label>

        </div>
        <div class="form-group">
            <label class="col-md-2 control-label" for="Title">内容</label>
            <div class="col-md-10">
                <textarea id="Content" name="Content" class="ckeditor"></textarea>

            </div>
        </div>
        <div class="form-group">
            <div id="filePicker" class="col-md-2 control-label">首页图片</div>
            <div id="fileList" class="col-md-10 uploader-list">

            </div>


        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input id="ctlBtn" type="submit" class="btn btn-lg btn-primary btn-block" value="发布" />
            </div>
        </div>
    </div>

    <input type="hidden" id="fileUrl" value="HDpic" />
    <input type="hidden" id="HDpic" value="HDpic" />
}
<script>
    function publish() {
        var entity = new Object();
        entity.Title = $("#" + fileObj).val(url);
        $.ajax({
            url: "/api/Blog/Post",
            type: "post",
            dataType: "json",
            data: { "Model": JSON.stringify(Model) },
            success: function (data) {
                if (data != null && data.length > 0) {//有数据
                    var No = 0;
                    $.each(data, function (key, item) {



                    });
                }
                else {//无数据
                    // alert(data.Message);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert("获取数据失败");
            }
        });
    }
    function addFileUrl(name, url) {
        var fileObj = $("#fileUrl").val();
        $("#" + fileObj).val(url);
        $("#showPic").attr("src", url);
    }
    var $ = jQuery, $btn = $('#ctlBtn'), $list = $('#fileList'), state = 'pending';
    var ValidateIndex,
    // ä¼˜åŒ–retina, åœ¨retinaä¸‹è¿™ä¸ªå€¼æ˜¯2
    ratio = window.devicePixelRatio || 1,

    // ç¼©ç•¥å›¾å¤§å°
    thumbnailWidth = 100 * ratio,
    thumbnailHeight = 100 * ratio;


    var uploader = WebUploader.create({

        // 选完文件后，是否自动上传。
        auto: false,

        // swf文件路径
        swf: '/Res/webuploader/Uploader.swf',

        // 文件接收服务端。
        server: '/FileUploader/HDpic',

        // 选择文件的按钮。可选。
        // 内部根据当前运行是创建，可能是input元素，也可能是flash.
        pick: '#filePicker',
        // 不压缩image, 默认如果是jpeg，文件上传前会压缩一把再上传！
        resize: false,
        // 只允许选择图片文件。
        accept: {
            title: '图片文件',
            extensions: 'gif,jpg,jpeg,bmp,png',
            mimeTypes: 'image/*'
        },
        fileNumLimit: 3,
        fileSizeLimit: 6 * 1024 * 1024,
        fileSingleSizeLimit: 5 * 1024 * 1024
    });
    uploader.on('beforeFileQueued', function (file) {
        switch (file.ext.toLowerCase()) {
            case "gif": return true;
            case "jpg": return true;
            case "jpeg": return true;
            case "bmp": return true;
            case "png": return true;
        }
        alert("请选择图片文件");
        return false;
    });
    uploader.on('fileQueued', function (file) {
        var $li = $(
                '<div id="' + file.id + '" class="file-item thumbnail col-md-4">' +
                    '<img>' +
                    '<div class="info">' + file.name + '</div>' +
                '</div>'
                ),
            $img = $li.find('img');


        // $list为容器jQuery实例
        $list.append($li);
        // 创建缩略图
        // 如果为非图片文件，可以不用调用此方法。
        // thumbnailWidth x thumbnailHeight 为 100 x 100
        uploader.makeThumb(file, function (error, src) {
            if (error) {
                $img.replaceWith('<span>不能预览</span>');
                return;
            }

            $img.attr('src', src);
        }, thumbnailWidth, thumbnailHeight);

    });
    // 文件上传过程中创建进度条实时显示。
    uploader.on('uploadProgress', function (file, percentage) {
        var $li = $('#' + file.id),
            $percent = $li.find('.progress span');

        // 避免重复创建
        if (!$percent.length) {
            $percent = $('<p class="progress"><span></span></p>')
                    .appendTo($li)
                    .find('span');
        }

        $percent.css('width', percentage * 100 + '%');
    });

    // 文件上传成功，给item添加成功class, 用样式标记上传成功。
    uploader.on('uploadSuccess', function (file, responseText) {
        //$('#' + file.id).remove();
        var validate;
        for (var d in responseText) {
            validate = responseText[d];
        }
        ValidateIndex = validate.indexOf("<script");
        if (ValidateIndex > 0) {
            $.messager.alert('提示', '登录超时');
        } else {
            alert(1);
        }
        uploader.reset();
    });

    // 文件上传失败，显示上传出错。
    uploader.on('uploadError', function (file) {
        var $li = $('#' + file.id),
            $error = $li.find('div.error');

        // 避免重复创建
        if (!$error.length) {
            $error = $('<div class="error"></div>').appendTo($li);
        }

        $error.text('上传失败');
    });
    $btn.on('click', function () {
        if (state === 'uploading') {
            uploader.stop();
        } else {
            uploader.upload();
        }
    });


</script>
